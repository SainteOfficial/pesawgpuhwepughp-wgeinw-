-- Sicheres Skript zum Ausgeben aller Karten und deren Eigenschaften
local success, result = pcall(function()
    -- Grundlegende Dienste und Module laden
    local ReplicatedStorage = game:GetService("ReplicatedStorage")
    
    -- Überprüfen, ob die Pfade existieren
    if not ReplicatedStorage:FindFirstChild("rbxts_include") then
        warn("rbxts_include nicht gefunden in ReplicatedStorage")
        return
    end
    
    print("Module werden geladen...")
    
    -- Module sicher laden
    local function safeRequire(path)
        if not path then return nil end
        local success, module = pcall(require, path)
        if not success then
            warn("Fehler beim Laden des Moduls:", module)
            return nil
        end
        return module
    end
    
    -- RuntimeLib laden
    local runtimePath = ReplicatedStorage:FindFirstChild("rbxts_include"):FindFirstChild("RuntimeLib")
    local module = safeRequire(runtimePath)
    
    if not module then
        warn("RuntimeLib konnte nicht geladen werden")
        return
    end
    
    print("Module erfolgreich geladen, Daten werden abgerufen...")
    
    -- LocalUser sicher importieren
    local function safeImport(...)
        local success, result = pcall(function(...)
            return module.import(...)
        end, ...)
        
        if not success then
            warn("Import fehlgeschlagen:", result)
            return nil
        end
        return result
    end
    
    local LocalUser = safeImport(script, ReplicatedStorage, "TS", "user", "local", "local-user").LocalUser
    
    if not LocalUser then
        warn("LocalUser konnte nicht importiert werden")
        return
    end
    
    print("LocalUser gefunden, Karten werden gesucht...")
    
    -- Sicher auf Kartendaten zugreifen
    if not LocalUser.atomMap then
        warn("atomMap nicht in LocalUser gefunden")
        return
    end
    
    local player = LocalUser.atomMap.player()
    if not player then
        warn("player() gibt nil zurück")
        return
    end
    
    if not player.cards then
        warn("cards nicht in player gefunden")
        return
    end
    
    if not player.cards.content then
        warn("content nicht in player.cards gefunden")
        return
    end
    
    local spielerKarten = player.cards.content
    
    -- Jetzt können wir sicher durch die Karten iterieren
    print("=== KARTENSAMMLUNG DES BENUTZERS ===")
    local kartenGezählt = 0
    
    for kartenId, kartenDaten in pairs(spielerKarten) do
        kartenGezählt = kartenGezählt + 1
        
        local menge = 0
        local rarität = "Unbekannt"
        local name = kartenId
        
        -- Versuche Kartenmenge zu ermitteln
        if type(kartenDaten) == "table" then
            if kartenDaten.getAmount and type(kartenDaten.getAmount) == "function" then
                menge = kartenDaten:getAmount()
            end
            
            -- Versuche Kartenobjekt zu erhalten
            if kartenDaten.getCard and type(kartenDaten.getCard) == "function" then
                local kartenObjekt = kartenDaten:getCard()
                
                if kartenObjekt then
                    -- Name der Karte holen, falls verfügbar
                    if kartenObjekt.name then
                        name = kartenObjekt.name
                    end
                    
                    -- Rarität extrahieren, wenn verfügbar
                    if kartenObjekt.rarity then
                        if type(kartenObjekt.rarity) == "table" then
                            if kartenObjekt.rarity.odds then
                                rarität = "1/" .. tostring(kartenObjekt.rarity.odds)
                            elseif kartenObjekt.rarity.chance then
                                rarität = "1/" .. tostring(kartenObjekt.rarity.chance)
                            end
                        end
                    end
                end
            end
        end
        
        print(string.format("Karte: %s | Menge: %d | Rarität: %s", name, menge, rarität))
    end
    
    print("Insgesamt " .. kartenGezählt .. " verschiedene Karten gefunden")
    print("==================")
end)

if not success then
    warn("Fehler beim Ausführen des Skripts: " .. tostring(result))
end
