-- RemoteEvent-Monitor (vereinfacht)
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")
local player = Players.LocalPlayer

-- Versuche, den RemoteEvent zu finden
print("Suche nach RemoteEvent...")

local success, result = pcall(function()
    -- Pfad zum RemoteEvent
    local pfad = ReplicatedStorage:WaitForChild("3aA"):WaitForChild("8c5664e6-c89f-45fb-9903-0208dfc1fe29")
    print("RemoteEvent gefunden: " .. pfad:GetFullName())
    
    -- Monitor für Server-zu-Client Kommunikation
    pfad.OnClientEvent:Connect(function(...)
        local args = {...}
        print("=== EINGEHEND (Server → Client) ===")
        print("Zeit: " .. os.date("%H:%M:%S"))
        print("Parameter:")
        
        for i, arg in ipairs(args) do
            print("  " .. i .. ": [" .. typeof(arg) .. "] " .. tostring(arg))
        end
        print("===============================")
    end)
    
    -- Remote Spy für den RemoteEvent (ohne Überschreiben der Funktion)
    local eventName = pfad:GetFullName()
    print("Überwache jetzt: " .. eventName)
    
    -- Erstelle ein neues RemoteFunction zum Testen
    local debugRemote = Instance.new("RemoteFunction")
    debugRemote.Name = "DebugMonitor"
    debugRemote.Parent = player
    
    -- Verwendung des namecall-Hooks (sicherer als Funktionsüberschreibung)
    local oldNamecall
    oldNamecall = hookmetamethod(game, "__namecall", function(self, ...)
        local args = {...}
        local method = getnamecallmethod()
        
        -- Prüfe, ob es unser überwachter RemoteEvent ist
        if self == pfad and (method == "FireServer") then
            print("=== AUSGEHEND (Client → Server) ===")
            print("Zeit: " .. os.date("%H:%M:%S"))
            print("Parameter:")
            
            for i, arg in ipairs(args) do
                print("  " .. i .. ": [" .. typeof(arg) .. "] " .. tostring(arg))
            end
            print("===============================")
        end
        
        return oldNamecall(self, ...)
    end)
    
    print("RemoteEvent-Monitor erfolgreich gestartet!")
end)

if not success then
    warn("FEHLER: " .. tostring(result))
    
    -- Diagnose des Pfades
    print("Diagnose des Pfades:")
    if ReplicatedStorage:FindFirstChild("3aA") then
        print("- Ordner '3aA' existiert")
        if ReplicatedStorage:FindFirstChild("3aA"):FindFirstChild("8c5664e6-c89f-45fb-9903-0208dfc1fe29") then
            print("- RemoteEvent existiert")
        else
            print("- RemoteEvent existiert NICHT in '3aA'")
            print("- Vorhandene Objekte in '3aA':")
            for _, item in pairs(ReplicatedStorage:FindFirstChild("3aA"):GetChildren()) do
                print("  - " .. item.Name .. " (" .. item.ClassName .. ")")
            end
        end
    else
        print("- Ordner '3aA' existiert NICHT in ReplicatedStorage")
        print("- Vorhandene Objekte in ReplicatedStorage:")
        for _, item in pairs(ReplicatedStorage:GetChildren()) do
            print("  - " .. item.Name .. " (" .. item.ClassName .. ")")
        end
    end
end
