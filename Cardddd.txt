-- Lokales Skript zum Anzeigen aller Benutzerkarten
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")

-- Wichtige Module importieren
local RuntimeLib = require(ReplicatedStorage:WaitForChild("rbxts_include"):WaitForChild("RuntimeLib"))
local LocalUserModule = RuntimeLib.import(script, ReplicatedStorage, "TS", "user", "local", "local-user")
local RarityModule = RuntimeLib.import(script, ReplicatedStorage, "TS", "rarity")
local Abbreviators = RuntimeLib.import(script, ReplicatedStorage, "TS", "constants", "abbreviators").Abbreviators

local LocalUser = LocalUserModule.LocalUser
local Rarity = RarityModule.Rarity

-- Funktion zum Formatieren der Rarität als Bruch (z.B. 1/100M)
local function formatRarity(card)
    local rarityName = card.rarity.name
    local rarityValue = card.rarityValue
    local abbrev = ""
    
    -- Wert der Rarität abkürzen (K für Tausend, M für Million usw.)
    if rarityValue >= 1000000000 then
        abbrev = "B"
        rarityValue = rarityValue / 1000000000
    elseif rarityValue >= 1000000 then
        abbrev = "M"
        rarityValue = rarityValue / 1000000
    elseif rarityValue >= 1000 then
        abbrev = "K"
        rarityValue = rarityValue / 1000
    end
    
    return string.format("1/%s%s", tostring(rarityValue), abbrev)
end

-- Funktion zum Anzeigen aller Karten
local function printAllUserCards()
    print("=== KARTENINVENTAR DES SPIELERS ===")
    print("Name | Menge | Rarität | Rarität-Wert")
    print("------------------------------------")
    
    -- Abwarten, bis Spielerdaten geladen sind
    local playerData = LocalUser.atomMap.player()
    if not playerData then
        print("Spielerdaten noch nicht geladen. Bitte versuche es später erneut.")
        return
    end
    
    local cardContent = playerData.cards.content
    local totalCards = 0
    local cardCount = 0
    
    -- Zählen wie viele Karten insgesamt vorhanden sind
    for _, amount in pairs(cardContent) do
        totalCards = totalCards + amount
    end
    
    print("Gesamtzahl der Karten: " .. totalCards)
    
    -- Alle Karten durchgehen und ausgeben
    for cardId, amount in pairs(cardContent) do
        if amount > 0 then
            cardCount = cardCount + 1
            
            -- Versuche, die Kartendaten aus dem Spielerkartenregister zu laden
            local userCard = playerData.cards:getCard(cardId)
            if userCard then
                local card = userCard:getCard()
                local rarityText
                
                -- Spezielle Ausgabe für besondere Raritäten
                if card.rarity == Rarity.RAINBOW then
                    rarityText = "RAINBOW"
                elseif card.rarity == Rarity.SECRET then
                    rarityText = "SECRET"
                else
                    rarityText = formatRarity(card)
                end
                
                print(string.format("%s | %d | %s | %s", 
                    card.name,
                    amount, 
                    card.rarity.name, 
                    rarityText
                ))
            else
                print(string.format("Karte ID: %s | Menge: %d | [Kartendaten nicht verfügbar]", 
                    cardId, 
                    amount
                ))
            end
        end
    end
    
    print("------------------------------------")
    print("Anzahl der unterschiedlichen Karten: " .. cardCount)
end

-- Ausführung der Funktion mit einer kleinen Verzögerung, um sicherzustellen, dass alle Daten geladen sind
wait(2)
printAllUserCards()
