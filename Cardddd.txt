-- RemoteEvent Monitor LocalScript
local remoteEvent = game:GetService("ReplicatedStorage"):WaitForChild("3aA"):WaitForChild("8c5664e6-c89f-45fb-9903-0208dfc1fe29")
local funktionsName = remoteEvent:GetFullName()

-- Überwache eingehende Server-zu-Client Kommunikation
remoteEvent.OnClientEvent:Connect(function(...)
    local args = {...}
    print("=== EINGEHENDER REMOTE EVENT ===")
    print("Event: " .. funktionsName)
    print("Richtung: Server -> Client")
    print("Zeit: " .. os.date("%H:%M:%S"))
    print("Parameter:")
    
    for i, arg in ipairs(args) do
        local argTyp = typeof(arg)
        local argWert = tostring(arg)
        print("  " .. i .. ": [" .. argTyp .. "] " .. argWert)
        
        -- Wenn es ein Objekt ist, zeige mehr Details
        if argTyp == "Instance" then
            print("     Name: " .. arg.Name)
            print("     Klasse: " .. arg.ClassName)
            print("     Pfad: " .. arg:GetFullName())
        elseif argTyp == "table" then
            for k, v in pairs(arg) do
                print("     " .. tostring(k) .. ": " .. tostring(v))
            end
        end
    end
    print("============================")
end)

-- Erstelle eine Kopie der originalen FireServer-Funktion
local originalFireServer = remoteEvent.FireServer
local letzterAufruf = 0
local aufrufZähler = 0

-- Überschreibe die FireServer-Funktion, um sie zu überwachen
remoteEvent.FireServer = function(self, ...)
    -- Führe die eigentliche Funktion aus
    originalFireServer(self, ...)
    
    -- Protokolliere den Aufruf
    local aktuelleZeit = tick()
    local zeitDifferenz = aktuelleZeit - letzterAufruf
    letzterAufruf = aktuelleZeit
    aufrufZähler = aufrufZähler + 1
    
    local args = {...}
    print("=== AUSGEHENDER REMOTE EVENT ===")
    print("Event: " .. funktionsName)
    print("Richtung: Client -> Server")
    print("Zeit: " .. os.date("%H:%M:%S"))
    print("Aufruf #: " .. aufrufZähler)
    print("Zeit seit letztem Aufruf: " .. string.format("%.4f", zeitDifferenz) .. " Sekunden")
    print("Parameter:")
    
    for i, arg in ipairs(args) do
        local argTyp = typeof(arg)
        local argWert = tostring(arg)
        print("  " .. i .. ": [" .. argTyp .. "] " .. argWert)
        
        -- Wenn es ein Objekt ist, zeige mehr Details
        if argTyp == "Instance" then
            print("     Name: " .. arg.Name)
            print("     Klasse: " .. arg.ClassName)
            print("     Pfad: " .. arg:GetFullName())
        elseif argTyp == "table" then
            for k, v in pairs(arg) do
                print("     " .. tostring(k) .. ": " .. tostring(v))
            end
        end
    end
    print("============================")
end

-- Zeige Startbenachrichtigung
print("RemoteEvent-Monitor gestartet für: " .. funktionsName)
print("Warte auf Aktivitäten...")
