-- Local Script zum Ausgeben aller Karten, Mengen und Raritäten
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local module = require(ReplicatedStorage:WaitForChild("rbxts_include"):WaitForChild("RuntimeLib"))
local LocalUser = module.import(script, ReplicatedStorage, "TS", "user", "local", "local-user").LocalUser

local function alleKartenAusgeben()
    print("=== Kartensammlung des Benutzers mit Raritäten ===")
    
    -- Zugriff auf die Karten des Spielers
    local spielerKarten = LocalUser.atomMap.player().cards.content
    
    -- Durch alle Karten iterieren und sie ausgeben
    for kartenId, kartenDaten in pairs(spielerKarten) do
        local menge = kartenDaten
        
        -- Falls es ein Objekt mit einer getAmount-Methode ist, diese verwenden
        if type(kartenDaten) == "table" or type(kartenDaten) == "userdata" then
            if kartenDaten.getAmount then
                menge = kartenDaten:getAmount()
            end
        end
        
        -- Karte abrufen, um Rarität zu erhalten
        local kartenObjekt = kartenDaten:getCard()
        local raritätInfo = ""
        
        -- Versuche alle möglichen Rarität-Eigenschaften zu finden
        if kartenObjekt and kartenObjekt.rarity then
            if kartenObjekt.rarity.name then
                raritätInfo = raritätInfo .. "Typ: " .. kartenObjekt.rarity.name
            end
            
            -- Numerische Rarität (1/100m etc.)
            if kartenObjekt.rarity.odds or kartenObjekt.rarity.chance or kartenObjekt.rarity.rarity then
                local numerischeRarität = kartenObjekt.rarity.odds or kartenObjekt.rarity.chance or kartenObjekt.rarity.rarity
                raritätInfo = raritätInfo .. ", Rarität: 1/" .. tostring(numerischeRarität)
            end
            
            -- Fallback, wenn keine spezifische Rarität gefunden wurde
            if raritätInfo == "" and type(kartenObjekt.rarity) == "string" then
                raritätInfo = "Rarität: " .. kartenObjekt.rarity
            end
        end
        
        print("Karten-ID: " .. kartenId .. ", Menge: " .. tostring(menge) .. ", " .. raritätInfo)
    end
    
    print("==================")
end

-- Funktion aufrufen
alleKartenAusgeben()
